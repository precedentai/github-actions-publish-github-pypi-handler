name: PyPI-Publisher-Handler
description: 'Creates a PR to upsert the given package to the PyPI repo'

inputs:
  name:
    description: 'Name of the package'
    required: true
  
  version:
    description: 'Version of the package'
    required: true

  archive_url:
    description: 'URL to the package archive'
    required: true

  archive_sha256:
    description: 'SHA256 of the package archive'
    required: false

  pypi_base_url:
    description: 'Base URL of the PyPI repo.'
    required: false

  github-token:
    description: 'GitHub token to use for triggering the publish workflow in the PyPI repo. If not provided, the default token will be used.'
    required: false

  checkout:
    description: 'Checkout the repo'
    required: false
    default: 'true'

  python-version:
    description: 'Python version to use'
    required: false
    default: '3.8'

  commit_branch:
    description: 'Branch to commit the changes to. Set to "auto" to create a new branch for each commit'
    required: false
    default: 'auto'

  pypi_root_dir:
    description: 'Root directory of the PyPI repo. This is the directory where the package will be upserted.'
    required: false
    default: 'pypi'

  pypi-github-user-email:
    description: 'GitHub user email to use for committing the changes'
    required: false
    default: 'github-actions[bot]@users.noreply.github.com'

  pypi-github-user-name:
    description: 'GitHub user name to use for committing the changes'
    required: false
    default: 'github-actions[bot]'



runs:
  using: "composite"
  steps:

    # checkout the repo
    - id: checkout
      if: ${{ inputs.checkout == 'true' }}
      name: checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Build wheel
      shell: bash
      run: |
        pip install --upgrade build
        python -m build --wheel
        ls -lh dist/

    - name: upsert-package
      shell: bash
      env:
        python_service_name: "${{ inputs.name }}"
        python_service_version: "${{ inputs.version }}"
        python_service_archive_url: "${{ inputs.archive_url }}"
        python_service_archive_sha256: "${{ inputs.archive_sha256 }}"
        commit_branch: "${{ inputs.commit_branch }}"
        root_dir: ${{ inputs.pypi_root_dir }}
        base_url: ${{ inputs.pypi_base_url }}
      run: python "${GITHUB_ACTION_PATH}/src/main.py"

    - name: commit changes
      shell: bash
      env:
       # use github.token if inputs.github-token not provided
        GH_TOKEN_INPUT: "${{ inputs.github-token }}"
        GH_TOKEN_DEFAULT: "${{ github.token }}"
        python_service_name: "${{ inputs.name }}"
        python_service_version: "${{ inputs.version }}"
        python_service_archive_url: "${{ inputs.archive_url }}"
        python_service_archive_sha256: "${{ inputs.archive_sha256 }}"
        commit_branch: "${{ inputs.commit_branch }}"
        root_dir: ${{ inputs.pypi_root_dir }}
        base_url: ${{ inputs.pypi_base_url }}
        GITHUB_ACTION_PATH: ${{ github.action_path }}
      run: |
        echo "Set up GH_TOKEN"
        GH_TOKEN="${GH_TOKEN_DEFAULT}"
        if [ -n "${GH_TOKEN_INPUT}" ]; then
          echo "using GH_TOKEN_INPUT"
          GH_TOKEN="${GH_TOKEN_INPUT}"
        else
          echo "using GH_TOKEN_DEFAULT"
        fi
        export GH_TOKEN
        
        echo "configure git"
        git config user.email ${{ inputs.pypi-github-user-email }}
        git config user.name ${{ inputs.pypi-github-user-name }}

        echo "git status - before"
        git status

        git_status_before=$(git status)
        echo "git_status_before:"
        echo "$git_status_before"

        set +e
        git_status_before_grep=$(echo $git_status_before | grep 'nothing to commit')
        git_status_before_grep_exit_code=$?
        set -e
        echo "git_status_before_grep:"
        echo "$git_status_before_grep"
        echo "git_status_before_grep_exit_code: $git_status_before_grep_exit_code"

        # if the exit code is greater than zero or if the string is empty, then there are changes to commit
        # there_are_changes_to_commit=[ $git_status_before_grep_exit_code -gt 0 ]

        # check if there are any changes to commit
        if [ $git_status_before_grep_exit_code -eq 0 ]; then
          echo "No changes to commit"
          exit 0
        fi

        current_branch_name="$(git rev-parse --abbrev-ref HEAD)"
        echo "current_branch_name=${current_branch_name}"

        branch_is_new=""
        inputs_commit_branch_exists=$(git branch --list "${{ inputs.commit_branch }}")
        if [ "${{ inputs.commit_branch }}" == "auto" ]; then
          # new branch name should be 'pypi-{run_id}-{run_number}'
          new_branch_name="pypi-${{ github.run_id }}-${{ github.run_number }}"
          
          echo "git checkout -b ${new_branch_name}"
          git checkout -b "${new_branch_name}"
          branch_is_new="true"
        else
          # check if branch exists remotely, and create it if it does not
          if [ -z "${inputs_commit_branch_exists}" ]; then
            echo "git checkout -b ${{ inputs.commit_branch }}"
            git checkout -b "${{ inputs.commit_branch }}"
            branch_is_new="true"
          else
            echo "git checkout ${{ inputs.commit_branch }}"
            git checkout "${{ inputs.commit_branch }}"
          fi
        fi
        
        echo "git add ${root_dir}"
        git add "${root_dir}/."

        # tmp file for commit message
        commit_message_file="$(mktemp)"
        echo "PyPI Package Upsert" > "${commit_message_file}"
        echo "{ \"name\": \"${{ inputs.name }}\", \"version\": \"${{ inputs.version }}\", \"archive_url\": \"${{ inputs.archive_url }}\", \"archive_sha256\": \"${{ inputs.archive_sha256 }}\" }" >> "${commit_message_file}"

        commit_message="$(cat ${commit_message_file})"

        echo "commit message:"
        echo "${commit_message}"

        git commit -m "${commit_message}"

        echo "git status - after"
        git status



        echo "git push"
        if [ "${branch_is_new}" == "true" ]; then
          git push -u origin HEAD
        else
          git push
        fi


        # create a PR
        echo "creating PR"
        pr_title="PyPI - Upsert Package: ${{ inputs.name }} - ${{ inputs.version }}"
        pr_body="The package has a version update to be published to PyPI.
        <pre><code>
        {
          \"name\": \"${{ inputs.name }}\",
          \"version\": \"${{ inputs.version }}\",
          \"archive_url\": \"${{ inputs.archive_url }}\",
          \"archive_sha256\": \"${{ inputs.archive_sha256 }}\"
        }
        </code></pre>

        This PR was created by a [workflow](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }}) triggered by a commit [${GITHUB_SHA}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}).
        "

        target_branch="${GITHUB_BASE_REF}"
        echo "gh pr create --title \"$pr_title\" --body \"$pr_body\" --base $current_branch_name"
        gh pr create --title "$pr_title" --body "$pr_body" --base $current_branch_name

      